{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","utils/format.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","res","console","log","data","response","id","delete","config","headers","post","Provider","value","getTransactions","deleteTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","Math","abs","className","Transaction","sign","text","onClick","TransactionList","useEffect","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.71e93c4a.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2>\r\n            Wallet Tracker\r\n        </h2>\r\n    )\r\n}\r\n","export default (state, action) => {\r\n    switch(action.type) {\r\n\r\n        case 'GET_TRANSACTIONS':\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                transactions: action.payload\r\n            }\r\n     \r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => \r\n                    transaction._id !== action.payload)\r\n            }\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: [...state.transactions, action.payload]\r\n            }\r\n        case 'TRANSACTION_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react'\r\nimport AppReducer from './AppReducer'\r\nimport axios from 'axios'\r\n\r\n// Initial State\r\nconst initialState = {\r\n    transactions: [\r\n        // { id: 1, text: 'Flower', amount: -30 },\r\n        // { id: 2, text: 'Salary', amount: 400 },\r\n        // { id: 3, text: 'Book', amount: -20 },\r\n        // { id: 4, text: 'Camera', amount: -200 }\r\n    ],\r\n    error: null,\r\n    loading: true\r\n}\r\n\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider component\r\nexport const GlobalProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    // Actions\r\n    async function getTransactions() {\r\n        try {\r\n            // const res = await axios.get('http://localhost:5000/api/v1/transactions');\r\n            const res = await axios.get('/api/v1/transactions');\r\n            console.log(res.data.data);\r\n            dispatch({\r\n                type: 'GET_TRANSACTIONS',\r\n                payload: res.data.data\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: \"TRANSACTION_ERROR\",\r\n                payload: err.response.data.error\r\n            });\r\n            \r\n        }\r\n    }\r\n\r\n    async function deleteTransaction(id) {\r\n        try {\r\n            await axios.delete(`/api/v1/transactions/${id}`);\r\n            dispatch({\r\n                type : 'DELETE_TRANSACTION',\r\n                payload : id \r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: \"TRANSACTION_ERROR\",\r\n                payload: err.response.data.error\r\n            });\r\n        }\r\n       \r\n    }\r\n    async function addTransaction(transaction) {\r\n        const config = {\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        try {\r\n            const res = await axios.post('/api/v1/transactions', transaction, config);            \r\n            dispatch({\r\n                type : 'ADD_TRANSACTION',\r\n                payload : res.data.data\r\n            });\r\n        } catch (err) {\r\n            dispatch({\r\n                type: \"TRANSACTION_ERROR\",\r\n                payload: err.response.data.error\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value = {{\r\n            transactions: state.transactions,\r\n            error: state.error,\r\n            loading: state.loading,\r\n            getTransactions,\r\n            deleteTransaction,\r\n            addTransaction\r\n        }} >\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","export function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport {numberWithCommas} from '../utils/format';\r\n\r\nexport const Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n    const total  = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n    return (\r\n        <>\r\n            <h4>Your Balance</h4>\r\n            <h1 id=\"balance\">${numberWithCommas(total)}</h1>\r\n        </>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport {numberWithCommas} from '../utils/format';\r\n\r\n\r\nexport const IncomeExpenses = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const income  = amounts\r\n        .filter(item => item > 0)\r\n        .reduce((acc, item) => (acc += item), 0)\r\n        .toFixed(2);\r\n    const expense  = Math.abs(amounts\r\n        .filter(item => item < 0)\r\n        .reduce((acc, item) => (acc += item), 0))\r\n        .toFixed(2);\r\n\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p id=\"money-plus\" className=\"money plus\">${numberWithCommas(income)}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p id=\"money-minus\" className=\"money minus\">-${numberWithCommas(expense)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nexport const Transaction = ({transaction}) => {\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n    const {deleteTransaction} = useContext(GlobalContext)\r\n    return (\r\n        \r\n        <li className= {sign === '-'? 'minus' : 'plus'}>\r\n                        {transaction.text} <span> {sign}${Math.abs(transaction.amount)}</span>\r\n                        <button\r\n                            onClick = {() => deleteTransaction(transaction._id)} className=\"delete-btn\">x</button>\r\n                    </li>\r\n    )\r\n}\r\n","import React, { useContext, useEffect } from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport {Transaction} from './Transaction';\r\n\r\nexport const TransactionList = () => {\r\n    const { transactions, getTransactions } = useContext(GlobalContext);\r\n\r\n    useEffect(() => {\r\n        getTransactions();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h3>History</h3>\r\n            <ul className=\"list\">\r\n                {transactions.map(transaction => (\r\n                    <Transaction \r\n                        key = {transaction._id}\r\n                        transaction = {transaction}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState, useContext} from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\n\r\nexport const AddTransaction = () => {\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const {addTransaction} = useContext(GlobalContext)\r\n\r\n    const onSubmit = e =>  {\r\n        e.preventDefault();\r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text,\r\n            amount: +amount     //to make it a number and not string\r\n        }\r\n        addTransaction(newTransaction);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Add new transaction</h3>  \r\n            <form onSubmit= {onSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"text\">Text</label>\r\n                    <input \r\n                        value = {text}\r\n                        onChange={(e) => setText(e.target.value)}\r\n                        type=\"text\"placeholder=\"What was it for?\" />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"amount\">Amount\r\n                    (-ve expense, +ve income)\r\n                    </label>\r\n                    <input \r\n                        value = {amount}\r\n                        onChange={(e) => setAmount(e.target.value)}\r\n                        type=\"number\"placeholder=\"Enter amount...\" />\r\n                </div>\r\n                <button className=\"btn\"> Add transaction</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Header} from './components/Header'\nimport {Balance} from './components/Balance'\nimport {IncomeExpenses} from './components/IncomeExpenses'\nimport {TransactionList} from './components/TransactionList'\nimport {AddTransaction} from './components/AddTransaction'\nimport {GlobalProvider} from './context/GlobalState'\n\n\nfunction App() {\n  return (\n    <GlobalProvider >\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}